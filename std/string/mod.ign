import { MutOnly, FFILink } from "std:meta";
import { IgnisNumbersType } from "std:types";

extern ffi::String {
  include "std/string/string.h";
  source "std/string/string.c";

  function stringLength(self: string): u32;
  function stringIncludes(self: string, search: string): boolean;
  function stringSplit(self: string, separator: string): string[];
  function stringCharAt(self: string, index: u32): char;
  function stringToUpperCase(self: string): string;
  function stringToLowerCase(self: string): string;
  function stringToNumber<T as IgnisNumbersType>(self: string, type_: T): T;
  function stringToBoolean(self: string): boolean;
  function stringToBytes(self: string): u8[];
  function stringTrim(self: string): string;
  function stringTrimStart(self: string): string;
  function stringTrimEnd(self: string): string;
  function stringStartsWith(self: string, search: string): boolean;
  function stringEndWith(self: string, search: string): boolean;
  function stringSlice(self: string, start: i32, end: i32): string;
  function stringClone(self: string): string;

  function stringPush(self: *string, value: string): void;
  function stringPop(self: *string): string;
  function stringConcat(self: *string, value: string): void;
  function stringClear(self: *string): void;
  function stringReplace(self: *string, search: string, replace: string): void;
}


export record string {
  /**
   * Gets the length of the string.
   *
   * @return {u32} The length of the string.
   *
   * @example
   * ```ignis
   * let self: string = "Hello, world!";
   * let len: u32 = str.length;
   * io::println(len); // Output: 13
   * ```
   */
  #FFILink("ffi::String::stringLength")
  length: u32;

  /**
   * Checks if the string includes the specified substring.
   *
   * @param {string} search - The substring to search for.
   * @return {boolean} True if the substring is found, false otherwise.
   *
   * @example
   * ```ignis
   * let self: string = "Hello, world!";
   * let includesWorld: string = str.includes("world");
   * io::println(includesWorld); // Output: true
   * ```
   */
  #FFILink("ffi::String::stringIncludes")
  includes(search: string): boolean;

  /**
   * Splits the string into an array of substrings using the specified separator.
   *
   * @param {string} separator - The character or string to use for separating the string.
   * @return {string[]} An array of substrings.
   *
   * @example
   * ```ignis
   * let self: string = "a,b,c";
   * let arr: string[] = str.split(",");
   * io::println(arr); // Output: ["a", "b", "c"]
   * ```
   */
  #FFILink("ffi::String::stringSplit")
  split(separator: string): string[];

  /**
   * Returns the character at the specified index.
   *
   * @param {u32} index - The index of the character to return.
   * @return {char} The character at the specified index.
   *
   * @example
   * ```ignis
   * let self: string = "Hello";
   * let char: char = str.charAt(1);
   * io::println(char); // Output: "e"
   * ```
   */
  #FFILink("ffi::String::stringCharAt")
  charAt(index: u32): char; // TODO: implement this with Optional<char>

  /**
   * Converts the string to uppercase.
   *
   * @return {string} The uppercase version of the string.
   *
   * @example
   * ```ignis
   * let self: string = "Hello";
   * let upperself: string = str.toUpperCase();
   * io::println(upperStr); // Output: "HELLO"
   * ```
   */
  #FFILink("ffi::String::stringToUpperCase")
  toUpperCase(): string;

  /**
   * Converts the string to lowercase.
   *
   * @return {string} The lowercase version of the string.
   *
   * @example
   * ```ignis
   * let self: string = "Hello";
   * let lowerself: string = str.toLowerCase();
   * io::println(lowerStr); // Output: "hello"
   * ```
   */
  #FFILink("ffi::String::stringToLowerCase")
  toLowerCase(): string;

  /**
   * Converts the string to a number.
   *
   * @return {T} The numeric value of the string.
   *
   * @example
   * ```ignis
   * let self: string = "123";
   * let num: i32 = str.toNumber<i32>();
   * io::println(num); // Output: 123
   * ```
   */
  #FFILink("ffi::String::stringToNumber")
  toNumber<T as IgnisNumbersType>(): T; // TODO: implement this with Result<O, E>

  /**
   * Converts the string to a boolean.
   *
   * @return {boolean} True if the string is "true", false otherwise.
   *
   * @example
   * ```ignis
   * let self: string = "true";
   * let bool: boolean = str.toBoolean();
   * io::println(bool); // Output: true
   * ```
   */
  #FFILink("ffi::String::stringToBoolean")
  toBoolean(): boolean; // TODO: implement this with Result<O, E>

  /**
   * Converts the string to an array of bytes.
   * @return {u8[]} An array of bytes representing the string.
   * @example
   * ```
   * let str = "Hello";
   * let bytes = str.toBytes();
   * io::println(bytes); // Output: [72, 101, 108, 108, 111]
   * ```
   */
  #FFILink("ffi::String::stringToBytes")
  toBytes(): u8[]; // TODO: implement this with Result<O, E>

  /**
   * Trims whitespace from both ends of the string.
   *
   * @return {string} The trimmed string.
   * @example
   * ```
   * let str = "  Hello  ";
   * str.trim();
   * io::println(trimmedStr); // Output: "Hello"
   * ```
   */
  #FFILink("ffi::String::stringTrim")
  trim(): string;

  /**
   * Trims whitespace from the beginning of the string.
   * @return {string} The trimmed string.
   * @example
   * ```
   * let str = "  Hello";
   * let trimmedStr = str.trimStart();
   * io::println(trimmedStr); // Output: "Hello"
   * ```
   */
  #FFILink("ffi::String::stringTrimStart")
  trimStart(): string;

  /**
   * Trims whitespace from the end of the string.
   *
   * @return {string} The trimmed string.
   *
   * @example
   * ```
   * let str = "Hello  ";
   * let trimmedStr = str.trimEnd();
   * io::println(trimmedStr); // Output: "Hello"
   * ```
   */
  #FFILink("ffi::String::stringTrimEnd")
  trimEnd(): string;

  /**
   * Checks if the string starts with the specified substring.
   * @param {string} search - The substring to search for.
   * @return {boolean} True if the string starts with the substring, false otherwise.
   * @example
   * ```
   * let str = "Hello, world!";
   * let startsWithHello = str.startsWith("Hello");
   * io::println(startsWithHello); // Output: true
   * ```
   */
  #FFILink("ffi::String::stringStartsWith")
  startsWith(search: string): boolean;

  /**
   * Checks if the string ends with the specified substring.
   * @param {string} search - The substring to search for.
   * @return {boolean} True if the string ends with the substring, false otherwise.
   * @example
   * ```
   * let str = "Hello, world!";
   * let endsWithWorld = str.endWith("world!");
   * io::println(endsWithWorld); // Output: true
   * ```
   */
  #FFILink("ffi::String::stringEndWith")
  endWith(search: string): boolean;

  /**
   * Extracts a section of the string and returns it as a new string.
   *
   * @param {i32} start - The start index of the slice.
   * @param {i32} end - The end index of the slice.
   * @return {string} The extracted section of the string.
   *
   * @example
   * ```ignis
   * let self: string = "Hello, world!";
   * let slice: string = str.slice(0, 5);
   * io::println(slice); // Output: "Hello"
   * ```
   */
  #FFILink("ffi::String::stringSlice")
  slice(start: i32, end: i32): string;

  /**
   * Clones the string.
   *
   * @return {string} A new string that is a clone of the original string.
   *
   * @example
   * ```
   * let self: string = "Hello";
   * let clonedself: string = str.clone();
   * io::println(clonedStr); // Output: "Hello"
   * ```
   */
  #FFILink("ffi::String::stringClone")
  clone(): string;

// #region Mutating Methods

  /**
   * Appends a value to the end of the string.
   *
   * @param {string} value - The value to append to the string.
   *
   * @example
   * ```ignis
   * let mut self: string = "Hello";
   * str.push(", world!");
   * io::println(str); // Output: "Hello, world!"
   * ```
   */
  #[MutOnly, FFILink("ffi::String::stringPush")]
  push(value: string): void;

  /**
   * Removes the last character from the string.
   *
   * @return {string} The removed character.
   *
   * @example
   * ```ignis
   * let mut self: string = "Hello";
   * let lastChar: string = str.pop();
   * io::println(lastChar); // Output: "o"
   * io::println(str); // Output: "Hell"
   * ```
   */
  #[MutOnly, FFILink("ffi::String::stringPop")]
  pop(): string;

  /**
   * Concatenates the string with another string.
   *
   * @param {string} value - The string to concatenate with.
   *
   * @example
   * ```ignis
   * let mut self: string = "Hello";
   * str.concat(", world!");
   * io::println(str); // Output: "Hello, world!"
   * ```
   */
  #[MutOnly, FFILink("ffi::String::stringConcat")]
  concat(value: string): void;

  /**
   * Clears the string, making it an empty string.
   *
   * @example
   * ```ignis
   * let mut self: string = "Hello";
   * str.clear();
   * io::println(str); // Output: ""
   * ```
   */
  #[MutOnly, FFILink("ffi::String::stringClear")]
  clear(): void;

  /**
   * Replaces occurrences of a substring within the string with a new substring.
   *
   * @param {string} search - The substring to replace.
   * @param {string} replace - The new substring to insert.
   * @return {string} The new string with the replaced values.
   *
   * @example
   * ```ignis
   * let mut self: string = "Hello, world!";
   * io::println(str); // "Hello, world!"
   * str.replace("world", "Ignis");
   * io::println(newStr); // Output: "Hello, Ignis!"
   * ```
   */
  #[MutOnly, FFILink("ffi::String::stringReplace")]
  replace(search: string, replace: string): void; // TODO: Include option for use Regex
// #endregion
}
