import { MutOnly, FFILink } from "std::meta";
import { IgnisIntegerType } from "std::types";

extern __vector {
  record IgnisVector {
    length: u32;
    elementSize: u64;
    type_: IgnisType;
    data: unknown;
  }

  function vectorLength(self: IngisVector): u32;
  function vectorMap(self: IngisVector, fn: (unknown) -> IngisVector): IngisVector;
  function vectorFind(self: IngisVector, fn: (IngisVector) -> boolean): unknown;
  function vectorFindIndex(self: IngisVector, fn: (unknown) -> boolean): u32;
  function vectorFilter(self: IngisVector, fn: (unknown) -> boolean): unknown[];
  function vectorReduce(self: IngisVector, fn: (unknown, unknown) -> unknown, vectorialValue: unknown): unknown;
  function vectorIncludes(self: IngisVector, search: string): boolean;
  function vectorSome(self: IngisVector, fn: (unknown) -> boolean): boolean;
  function vectorEvery(self: IngisVector, fn: (unknown) -> boolean): boolean;
  function vectorMax(self: IngisVector): unknown;
  function vectorMin(self: IngisVector): unknown;
  function vectorClone(self: IngisVector): unknown[];
  function vectorPush(self: IngisVector, value: unknown): void;
  function vectorPop(self: IngisVector): unknown;
  function vectorShift(self: IngisVector): unknown;
}

export record<T> Vector {
  /**
   * Gets the length of the vector.
   *
   * @return {u32} The length of the vector.
   *
   * @example
   * ```ignis
   * let arr: i32[] = [1, 2, 3];
   * let len: u32 = arr.length;
   * ```
   */
  #FFILink("__vector::vectorLength")
  length(): u32;

  /**
   * Creates a new vector populated with the results of calling a provided on every element in the calling vector.
   *
   * @param {function(T, number, T[]): R} fn - that produces an element of the new vector.
   *
   * @return {R[]} A new vector with each element being the result of the callback function.
   */
  #FFILink("__vector::vectorMap")
  map<R>(fn: (T) -> R): R[];

  /**
   * Returns the first element in the vector that satisfies the provided testing function.
   *
   * @param {function(T, number, T[]): boolean} fn - to execute on each value in the vector.
   * @return {R} The first element that satisfies the provided testing function, or undefined if no elements satisfy it.
   */
  #FFILink("__vector::vectorFind")
  find<R>(fn: (T) -> boolean): R; // TODO: Change return for Optional<R>

  /**
   * Returns the index of the first element in the vector that satisfies the provided testing function.
   *
   * @param {function(T, number, T[]): boolean} fn - to execute on each value in the vector.
   * @return {u32} The index of the first element that satisfies the provided testing function, or -1 if no elements satisfy it.
   */
  #FFILink("__vector::vectorFindIndex")
  findIndex(fn: (T) -> boolean): u32;

  /**
   * Creates a new vector with all elements that pass the test implemented by the provided function.
   * @param {function(T, number, T[]): boolean} fn - to test each element of the vector.
   * @return {R[]} A new vector with the elements that pass the test.
   */
  #FFILink("__vector::vectorFilter")
  filter<R>(fn: (T) -> boolean): R[];

  /**
   * Executes a reducer on each element of the vector, resulting in a single output value.
   * @param {function(R, T, number, T[]): R} fn - to execute on each element in the vector.
   * @param {R} vectorialValue - Value to use as the first argument to the first call of the function.
   * @return {R} The value that results from the reduction.
   */
  #FFILink("__vector::vectorReduce")
  reduce<R>(fn: (R, T) -> R, vectorialValue: R): R;

  /**
   * Checks if an vector includes a certain value among its entries.
   * @param {string} search - The value to search for.
   * @return {boolean} True if the value is found, false otherwise.
   */
  #FFILink("__vector::vectorIncludes")
  includes(search: string): boolean;

  /**
   * Tests whether at least one element in the vector passes the provided function.
   * @param {function(T, number, T[]): boolean} fn - to test each element.
   * @return {boolean} True if the callback returns a truthy value for at least one element, otherwise false.
   */
  #FFILink("__vector::vectorSome")
  some(fn: (T) -> boolean): boolean;

  /**
   * Tests whether all elements in the vector pass the provided function.
   * @param {function(T, number, T[]): boolean} fn - to test each element.
   * @return {boolean} True if the callback returns a truthy value for all elements, otherwise false.
   */
  #FFILink("__vector::vectorEvery")
  every(fn: (T) -> boolean): boolean;

  /**
   * Returns the maximum value in the vector.
   * @return {T} The maximum value in the vector.
   */
  #FFILink("__vector::vectorMax")
  max(): T;

  /**
   * Returns the minimum value in the vector.
   * @return {T} The minimum value in the vector.
   */
  #FFILink("__vector::vectorMin")
  min(): T;

  /**
   * Creates a shallow copy of the vector.
   * @return {T[]} A new vector that is a shallow copy of the input vector.
   */
  #FFILink("__vector::vectorClone")
  clone(): T[];

  /**
   * Adds one or more elements to the end of the vector.
   * @param {T} value - The value to add to the vector.
   */
  #[MutOnly, FFILink("__vector::vectorPush")]
  push(value: T): void;

  /**
   * Removes the last element from the vector and returns it.
   * @return {T} The removed element from the vector.
   */
  #[MutOnly, FFILink("__vector::vectorPop")]
  pop(): T;

  /**
   * Removes the first element from the vector and returns it.
   * @return {T} The removed element from the vector.
   */
  #[MutOnly, FFILink("__vector::vectorShift")]
  shift(): T;
}
