import { MutOnly, FFILink } from "std::meta";
import { IgnisIntegerType } from "std::types";

extern __array {
  include "std/array/array.h";
  source "std/array/array.c";

  function arrayLength<T>(self: *T[]): u32;
  function arrayMap<T, R>(self: *T[], fn: (value: T) -> R): R[];
  function arrayFind<T, R>(self: *T[], fn: (value: T) -> boolean): R;
  function arrayFindIndex<T>(self: *T[], fn: (value: T) -> boolean): u32;
  function arrayFilter<T, R>(self: *T[], fn: (value: T) -> boolean): R[];
  function arrayReduce<T, R>(self: *T[], fn: (acc: R, value: T) -> R, arrayialValue: R): R;
  function arrayIncludes(self: *string, search: string): boolean;
  function arraySome<T>(self: *T[], fn: (value: T) -> boolean): boolean;
  function arrayEvery<T>(self: *T[], fn: (value: T) -> boolean): boolean;
  function arrayMax<T>(self: *T[]): T;
  function arrayMin<T>(self: *T[]): T;
  function arrayClone<T>(self: *T[]): T[];
  function arrayPush<T>(self: *T[], value: T): void;
  function arrayPop<T>(self: *T[]): T;
  function arrayShift<T>(self: *T[]): T;
}

export record<T> T[] {
  /**
   * Gets the length of the array.
   *
   * @return {u32} The length of the array.
   *
   * @example
   * ```ignis
   * let arr: i32[] = [1, 2, 3];
   * let len: u32 = arr.length;
   * ```
   */
  #FFILink("__array::arrayLength")
  length(): u32;

  /**
   * Creates a new array populated with the results of calling a provided on every element in the calling array.
   *
   * @param {function(T, number, T[]): R} fn - that produces an element of the new array.
   *
   * @return {R[]} A new array with each element being the result of the callback function.
   */
  #FFILink("__array::arrayMap")
  map<R>(fn: (value: T) -> R): R[];

  /**
   * Returns the first element in the array that satisfies the provided testing function.
   *
   * @param {function(T, number, T[]): boolean} fn - to execute on each value in the array.
   * @return {R} The first element that satisfies the provided testing function, or undefined if no elements satisfy it.
   */
  #FFILink("__array::arrayFind")
  find<R>(fn: (value: T) -> boolean): R; // TODO: Change return for Optional<R>

  /**
   * Returns the index of the first element in the array that satisfies the provided testing function.
   *
   * @param {function(T, number, T[]): boolean} fn - to execute on each value in the array.
   * @return {u32} The index of the first element that satisfies the provided testing function, or -1 if no elements satisfy it.
   */
  #FFILink("__array::arrayFindIndex")
  findIndex(fn: (value: T) -> boolean): u32;

  /**
   * Creates a new array with all elements that pass the test implemented by the provided function.
   * @param {function(T, number, T[]): boolean} fn - to test each element of the array.
   * @return {R[]} A new array with the elements that pass the test.
   */
  #FFILink("__array::arrayFilter")
  filter<R>(fn: (value: T) -> boolean): R[];

  /**
   * Executes a reducer on each element of the array, resulting in a single output value.
   * @param {function(R, T, number, T[]): R} fn - to execute on each element in the array.
   * @param {R} arrayialValue - Value to use as the first argument to the first call of the function.
   * @return {R} The value that results from the reduction.
   */
  #FFILink("__array::arrayReduce")
  reduce<R>(fn: (acc: R, value: T) -> R, arrayialValue: R): R;

  /**
   * Checks if an array includes a certain value among its entries.
   * @param {string} search - The value to search for.
   * @return {boolean} True if the value is found, false otherwise.
   */
  #FFILink("__array::arrayIncludes")
  includes(search: string): boolean;

  /**
   * Tests whether at least one element in the array passes the provided function.
   * @param {function(T, number, T[]): boolean} fn - to test each element.
   * @return {boolean} True if the callback returns a truthy value for at least one element, otherwise false.
   */
  #FFILink("__array::arraySome")
  some(fn: (value: T) -> boolean): boolean;

  /**
   * Tests whether all elements in the array pass the provided function.
   * @param {function(T, number, T[]): boolean} fn - to test each element.
   * @return {boolean} True if the callback returns a truthy value for all elements, otherwise false.
   */
  #FFILink("__array::arrayEvery")
  every(fn: (value: T) -> boolean): boolean;

  /**
   * Returns the maximum value in the array.
   * @return {T} The maximum value in the array.
   */
  #FFILink("__array::arrayMax")
  max(): T;

  /**
   * Returns the minimum value in the array.
   * @return {T} The minimum value in the array.
   */
  #FFILink("__array::arrayMin")
  min(): T;

  /**
   * Creates a shallow copy of the array.
   * @return {T[]} A new array that is a shallow copy of the input array.
   */
  #FFILink("__array::arrayClone")
  clone(): T[];

  /**
   * Adds one or more elements to the end of the array.
   * @param {T} value - The value to add to the array.
   */
  #[MutOnly, FFILink("__array::arrayPush")]
  push(value: T): void;

  /**
   * Removes the last element from the array and returns it.
   * @return {T} The removed element from the array.
   */
  #[MutOnly, FFILink("__array::arrayPop")]
  pop(): T;

  /**
   * Removes the first element from the array and returns it.
   * @return {T} The removed element from the array.
   */
  #[MutOnly, FFILink("__array::arrayShift")]
  shift(): T;
}
