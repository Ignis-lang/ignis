import { Copy } from "std::meta";

extern __types {
  type IgnisGenericTypeUnion = u8
    | u16
    | u32
    | u64
    | i8
    | i16
    | i32
    | i64
    | f32
    | f64
    | boolean
    | char
    | string
    | null;

  enum IgnisType {
    TYPE_I8,
    TYPE_I16,
    TYPE_I32,
    TYPE_I64,
    TYPE_U8,
    TYPE_U16,
    TYPE_U32,
    TYPE_U64,
    TYPE_F32,
    TYPE_F64,
    TYPE_BOOL,
    TYPE_CHAR,
    TYPE_STRING,
    TYPE_UNKNOWN,
  }

  record IgnisGenericType {
    type_: IgnisType;
    data: unknown;
  }

  function typeOf(value: unknown): IgnisType;
  function isType(value: unknown, type_: IgnisType): boolean;
  function isNumber(value: unknown): boolean;
  function isString(value: unknown): boolean;
  function isBoolean(value: unknown): boolean;
  function isChar(value: unknown): boolean;
  function isNull(value: unknown): boolean;
  function isArray(value: unknown): boolean;
}

/**
 * @brief Represents all numeric types supported by Ignis.
 *
 * This includes both integer and floating-point types.
 *
 * @typedef {i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | f32 | f64 | hex | binary} IgnisNumbersType
 *
 * @example
 * ```ignis
 * let num: IgnisNumbersType = 42;
 * let floatNum: IgnisNumbersType = 3.14;
 * ```
 */
#[Copy]
export type IgnisNumbersType = i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | f32 | f64 | hex | binary;

/**
 * @brief Represents all integer types supported by Ignis.
 *
 * This includes both signed and unsigned integers.
 *
 * @typedef {i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64} IgnisIntegerType
 *
 * @example
 * ```ignis
 * let intNum: IgnisIntegerType = 42;
 * let unsignedInt: IgnisIntegerType = 255;
 * ```
 */
export type IgnisIntegerType = i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64;

/**
 * @brief Represents all floating-point types supported by Ignis.
 *
 * This includes both 32-bit and 64-bit floating-point numbers.
 *
 * @typedef {f32 | f64} IgnisFloatType
 *
 * @example
 * ```ignis
 * let floatNum: IgnisFloatType = 3.14;
 * let doubleNum: IgnisFloatType = 2.718281828459;
 * ```
 */
export type IgnisFloatType = f32 | f64;

/**
 * @brief Represents all unsigned integer types supported by Ignis.
 *
 * This includes 8-bit, 16-bit, 32-bit, and 64-bit unsigned integers.
 *
 * @typedef {u8 | u16 | u32 | u64} IgnisUnsignedType
 *
 * @example
 * ```ignis
 * let unsignedNum: IgnisUnsignedType = 255;
 * let largeUnsignedNum: IgnisUnsignedType = 4294967295;
 * ```
 */
export type IgnisUnsignedType = u8 | u16 | u32 | u64;

export namespace types {
  enum IgnisType {
    TYPE_I8,
    TYPE_I16,
    TYPE_I32,
    TYPE_I64,
    TYPE_U8,
    TYPE_U16,
    TYPE_U32,
    TYPE_U64,
    TYPE_F32,
    TYPE_F64,
    TYPE_BOOL,
    TYPE_CHAR,
    TYPE_STRING,
    TYPE_UNKNOWN,
  }

  function typeOf(value: unknown): IgnisType {
    return __types::typeOf(value);
  }

  function isType(value: unknown, type_: IgnisType): boolean {
    return __types::isType(value, type_);
  }

  function isNumber(value: unknown): boolean {
    return __types::isNumber(value);
  }

  function isString(value: unknown): boolean {
    return __types::isString(value);
  }

  function isBoolean(value: unknown): boolean {
    return __types::isBoolean(value);
  }

  function isChar(value: unknown): boolean {
    return __types::isChar(value);
  }

  function isNull(value: unknown): boolean {
    return __types::isNull(value);
  }

  function isArray(value: unknown): boolean {
    return __types::isArray(value);
  }
}

// #[Copy]
// export enum Result<T, E> {
//   OK(T),
//   ERROR(E),
//
//   /**
//    * @brief Checks if the result is OK.
//    *
//    * @return True if the result is OK, false otherwise.
//    */
//   public isOk(): boolean {
//     return match (this) {
//       Result.OK(_) -> true,
//       _ -> false,
//     };
//   }
//
//   /**
//    * @brief Checks if the result is an error.
//    *
//    * @return True if the result is an error, false otherwise.
//    */
//   public isError(): boolean {
//     return !this.isOk();
//   }
//
//   /**
//    * @brief Unwraps the result, assuming it's OK.
//    *
//    * @return The unwrapped value of type T.
//    * @throws Panic if the result is an error.
//    */
//   public unwrap(): T {
//     return match (this) {
//       Result.OK(t) -> t,
//       Result.ERROR(e) -> #Panic("Result is an error"),
//     };
//   }
//
//   /**
//    * @brief Unwraps the error result.
//    *
//    * @return The unwrapped error value of type E.
//    * @throws Panic if the result is OK.
//    */
//   public unwrapErr(): E {
//     return match (this) {
//       Result.OK(t) -> #Panic("Result is an OK"),
//       Result.ERROR(e) -> e,
//     };
//   }
//
//   /**
//    * @brief Unwraps the result or returns a default value.
//    *
//    * @param defaultValue A default value to return if the result is an error.
//    * @return The unwrapped value or the default value.
//    */
//   public unwrapOr(defaultValue: T): T {
//     return match (this) {
//       Result.OK(t) -> t,
//       Result.ERROR(_) -> defaultValue,
//     };
//   }
// }
//
// #[Copy]
// export enum Option<S> {
//   SOME(S),
//   NONE,
//
//   /**
//    * @brief Checks if the option contains a value.
//    *
//    * @return True if the option contains a value, false otherwise.
//    */
//   public isSome(): boolean {
//     return match (this) {
//       Option.SOME(_) -> true,
//       _ -> false,
//     };
//   }
//
//   /**
//    * @brief Checks if the option is None.
//    *
//    * @return True if the option is None, false otherwise.
//    */
//   public isNone(): boolean {
//     return !this.isSome();
//   }
//
//   /**
//    * @brief Unwraps the value in the option.
//    *
//    * @return The unwrapped value of type S.
//    * @throws Panic if the option is None.
//    */
//   public unwrap(): S {
//     return match (this) {
//       Option.SOME(s) -> s,
//       Option.NONE -> #Panic("Option is None"),
//     };
//   }
//
//   /**
//    * @brief Unwraps the value or returns a default value.
//    *
//    * @param defaultValue A default value to return if the option is None.
//    * @return The unwrapped value or the default value.
//    */
//   public unwrapOr(defaultValue: S): S {
//     return match (this) {
//       Option.SOME(s) -> s,
//       Option.NONE -> defaultValue,
//     };
//   }
// }
