import { FFILink } from "std::meta";
import { IgnisNumbersType, IgnisFloatType } from "std::types";

extern __number {
  function numberToString(self: unknown, type_: unknown): string;
  function numberAbs(self: unknown, type_: unknown): u64 | f64;
  function numberToFixed(self: unknown, digits: u32, type_: unknown): unknown;
  function numberRound(self: unknown, type_: unknown): unknown;
  function numberFloor(self: unknown, type_: unknown): unknown;
  function numberCeil(self: unknown, type_: unknown): unknown;
}

export record<T as IgnisNumbersType> Numbers {
  /**
   * Converts the numeric value to a string.
   *
   * @param {T} value - The numeric value to convert.
   * @return {string} The string representation of the numeric value.
   *
   * @example
   * ```ignis
   * let num: i32 = 42;
   * let str: string = num.toString();
   * io::println(str); // Output: "42"
   * ```
   */
  #FFILink("__number::numberToString")
  toString(): string;

  /**
   * Returns the absolute value of the number.
   *
   * @return {u64 | f64} The absolute value.
   *
   * @example
   * ```ignis
   * let num: i32 = -42;
   * let absNum: i32 = num.abs();
   * io::println(absNum); // Output: 42
   * ```
   */
  #FFILink("__number::numberAbs")
  abs(): u64 | f64;
}

export record<F as IgnisFloatType> Floats {
  /**
   * Formats the number using fixed-point notation.
   *
   * @param {u32} digits - The number of digits to appear after the decimal point.
   * @return {T} The number formatted to the specified number of digits.
   *
   * @example
   * ```ignis
   * let num: f64 = 3.14159265359;
   * let formatted: string = num.toFixed(2);
   * io::println(formatted); // Output: 3.14
   * ```
   */
  #FFILink("__number::numberToFixed")
  toFixed(digits: u32): F;

  /**
   * Rounds the number to the nearest integer.
   *
   * @return {R} The rounded number.
   *
   * @example
   * ```ignis
   * let num: f64 = 3.14159265359;
   * let rounded: f64 = num.round();
   * io::println(rounded); // Output: 3
   * ```
   */
  #FFILink("__number::numberRound")
  round<R>(): R;

  /**
   * Rounds the number down to the nearest integer.
   *
   * @return {R} The largest integer less than or equal to the given number.
   *
   * @example
   * ```ignis
   * let num: f64 = 3.14159265359;
   * let floored: f64 = num.floor();
   * io::println(floored); // Output: 3
   * ```
   */
  #FFILink("__number::numberFloor")
  floor<R>(): R;

  /**
   * Rounds the number up to the nearest integer.
   *
   * @return {R} The smallest integer greater than or equal to the given number.
   *
   * @example
   * ```ignis
   * let num: f64 = 3.14159265359;
   * let ceiled: f64 = num.heil();
   * io::println(ceiled); // Output: 4
   * ```
   */
  #FFILink("__number::numberCeil")
  ceil<R>(): R;
}
