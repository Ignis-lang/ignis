import { FFILink } from "std:meta";
import { IgnisIntegerType } from "std:types";

extern ffi::char {
  include "std/char/char.h";
  source "std/char/char.c";

  function charToUpper(this: char): char;
  function charToLower(this: char): char;
  function charIsDigit(this: char): boolean;
  function charIsLetter(this: char): boolean;
  function charIsWhitespace(this: char): boolean;
  function charToNumber(this: char): unknown;
  function charCharCode(this: char): u8;
}

export record char {
  /**
   * Converts the character to uppercase.
   *
   * @return {char} The uppercase character.
   *
   * @example
   * ```ignis
   * let v: char = 'a';
   * io::println(v.toUpperCase()); // Output: 'A'
   * ```
   */
  #FFILink("ffi::char::charToUpper")
  toUpperCase(): char;

  /**
   * Converts the character to lowercase.
   *
   * @return {char} The lowercase character.
   *
   * @example
   * ```ignis
   * let v: char = 'A';
   * io::println(v.toLowerCase()); // Output: 'a'
   * ```
   */
  #FFILink("ffi::char::charToLower")
  toLowerCase(): char;

  /**
   * Checks if the character is a digit.
   *
   * @return {boolean} True if the character is a digit, false otherwise.
   *
   * @example
   * ```ignis
   * let v: char = '5';
   * let isDigit: boolean = v.isDigit();
   * io::println(isDigit); // Output: true
   * ```
   */
  #FFILink("ffi::char::charIsDigit")
  isDigit(): boolean;

  /**
   * Checks if the character is a letter.
   *
   * @return {boolean} True if the character is a letter, false otherwise.
   *
   * @example
   * ```ignis
   * let v: char = 'a';
   * let isLetter: boolean = v.isLetter();
   * io::println(isLetter); // Output: true
   * ```
   */
  #FFILink("ffi::char::charIsLetter")
  isLetter(): boolean;

  /**
   * Checks if the character is whitespace.
   *
   * @return {boolean} True if the character is whitespace, false otherwise.
   *
   * @example
   * ```ignis
   * let v: char = ' ';
   * let isWhitespace: boolean = v.isWhitespace();
   * io::println(isWhitespace); // Output: true
   * ```
   */
  #FFILink("ffi::char::charIsWhitespace")
  isWhitespace(): boolean;

  /**
   * Converts the character to its numeric value.
   *
   * @return {T} The numeric value of the character.
   *
   * @example
   * ```ignis
   * let v: char = '5';
   * let num: i32 = v.toNumber<i32>();
   * io::println(num); // Output: 5
   * ```
   */
  #FFILink("ffi::char::charToNumber")
  toNumber<T as IgnisIntegerType>(): T;

  /**
   * Returns the ASCII code of the character.
   *
   * @return {u8} The ASCII code of the character.
   *
   * @example
   * ```ignis
   * let v: char = 'A';
   * let code: u32 = char.charCode();
   * io::println(code); // Output: 65
   * ```
   */
  #FFILink("ffi::char::charCharCode")
  charCode(): u8;
}
