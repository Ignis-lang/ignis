import {
  FFIDeclarationType,
  CTypes,
  FFILanguage,
  FFIFlags,
  FFIConfig,
  FFIParam,
} from "std:ffi";
import { MutOnly } from "std:meta";
import { IgnisIntegerType } from "std:types";

export record char {
  /**
   * Converts the character to uppercase.
   *
   * @return {char} The uppercase character.
   *
   * @example
   * ```ignis
   * let v: char = 'a';
   * println(v.toUpperCase()); // Output: 'A'
   * ```
   */
  @FFILanguage({
    type_: FFIDeclarationType.FUNCTION,
    name: "toupper",
    params: [{
      name: "this",
      type_: CTypes.CHAR,
      flags: [ FFIFlags.RECEIVER ],
      isFormatted: false,
    }],
    returnType: CTypes.CHAR,
    file: {
      path: "std/char/char.c",
    }
  })
  toUpperCase(): char;

  /**
   * Converts the character to lowercase.
   *
   * @return {char} The lowercase character.
   *
   * @example
   * ```ignis
   * let v: char = 'A';
   * println(v.toLowerCase()); // Output: 'a'
   * ```
   */
  @FFILanguage({
    type_: FFIDeclarationType.FUNCTION,
    name: "tolower",
    params: [{
      name: "this",
      type_: CTypes.CHAR,
      flags: [ FFIFlags.RECEIVER ],
      isFormatted: false,
    }],
    returnType: CTypes.CHAR,
    file: {
      path: "std/char/char.c",
    }
  })
  toLowerCase(): char;

  /**
   * Checks if the character is a digit.
   *
   * @return {boolean} True if the character is a digit, false otherwise.
   *
   * @example
   * ```ignis
   * let v: char = '5';
   * let isDigit: boolean = v.isDigit();
   * println(isDigit); // Output: true
   * ```
   */
  @FFILanguage({
    type_: FFIDeclarationType.FUNCTION,
    name: "char_isDigit",
    params: [{
      name: "this",
      type_: CTypes.CHAR,
      flags: [ FFIFlags.RECEIVER ],
      isFormatted: false
    }],
    returnType: CTypes.BOOLEAN,
    file: {
      path: "std/char/char.c",
    }
  })
  isDigit(): boolean;

  /**
   * Checks if the character is a letter.
   *
   * @return {boolean} True if the character is a letter, false otherwise.
   *
   * @example
   * ```ignis
   * let v: char = 'a';
   * let isLetter: boolean = v.isLetter();
   * println(isLetter); // Output: true
   * ```
   */
  @FFILanguage({
    type_: FFIDeclarationType.FUNCTION,
    name: "char_isLetter",
    params: [{
      name: "this",
      type_: CTypes.CHAR,
      flags: [ FFIFlags.RECEIVER ],
      isFormatted: false,
    }],
    returnType: CTypes.BOOLEAN,
    file: {
      path: "std/char/char.c",
    }
  })
  isLetter(): boolean;

  /**
   * Checks if the character is whitespace.
   *
   * @return {boolean} True if the character is whitespace, false otherwise.
   *
   * @example
   * ```ignis
   * let v: char = ' ';
   * let isWhitespace: boolean = v.isWhitespace();
   * println(isWhitespace); // Output: true
   * ```
   */
  @FFILanguage({
    type_: FFIDeclarationType.FUNCTION,
    name: "char_isWhitespace",
    params: [{
      name: "this",
      type_: CTypes.CHAR,
      flags: [ FFIFlags.RECEIVER ],
      isFormatted: false
    }],
    returnType: CTypes.BOOLEAN,
    file: {
      path: "std/char/char.c",
    }
  })
  isWhitespace(): boolean;

  /**
   * Converts the character to its numeric value.
   *
   * @return {T} The numeric value of the character.
   *
   * @example
   * ```ignis
   * let v: char = '5';
   * let num: i32 = v.toNumber<i32>();
   * println(num); // Output: 5
   * ```
   */
  @FFILanguage({
    type_: FFIDeclarationType.FUNCTION,
    name: "char_toNumber",
    params: [{
      name: "this",
      type_: CTypes.CHAR,
      flags: [ FFIFlags.RECEIVER ],
      isFormatted: false,
    }],
    returnType: CTypes.U8,
    file: {
      path: "std/char/char.c",
    }
  })
  toNumber<T as IgnisIntegerType>(): T;

  /**
   * Returns the ASCII code of the character.
   *
   * @return {u8} The ASCII code of the character.
   *
   * @example
   * ```ignis
   * let v: char = 'A';
   * let code: u32 = char.charCode();
   * println(code); // Output: 65
   * ```
   */
  @FFILanguage({
    type_: FFIDeclarationType.FUNCTION,
    name: "char_charCode",
    params: [{
      name: "this",
      type_: CTypes.CHAR,
      flags: [ FFIFlags.RECEIVER ],
      isFormatted: false
    }],
    returnType: CTypes.U8,
    file: {
      path: "std/char/char.c",
    }
  })
  charCode(): u8;
}

