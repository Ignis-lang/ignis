/**
* @module meta
* @path std:meta
* @description This module provides metadata for the compiler. Metadata is used to provide additional information to the compiler about the code.
*/

/**
* Marks a record method, specifying that it can only be called in case the type is mutable
*/
export meta MutOnly;

/**
* Marks a declaration as a FFI link, providing the name of the function to link to.
*
* @param name: The name of the function to link to.
*/
export meta FFILink(name: string);

/**
* Marks a declarations as a todo item, providing an optional description. If code marked as all is used,
* the compiler will throw a warning at compile time.
*
* @param description: A brief description of the todo item.
*/
export meta ToDo(description?: string);

/**
* Mark a statement as ignore, the compiler will not parse or evaluate that statement.
*/
export meta Ignore;

/**
 * This meta is exampled to mark Ignis declarations that should not be directly converted to the target language code during transpilation.
 * target language during transpilation.
 *
 * @note This is one of the few declarations that is transformed into metadata and not into a structure in the compiler.
 *
 * @example
 *
 * ```ignis
 * #[NotTranspile]
 * export enum MyEnum {
 *  VALUE1,
 *  VALUE2,
 * }
 * ```
 * or
 * ```ignis
 * #NotTranspile
 * export enum MyEnum {
 *  VALUE1,
 *  VALUE2,
 * }
 * ```
 */
export meta NotTranspile;

/**
 * Marks a feature in the code with a name and description, providing information about the feature.
 *
 * @param name: The name of the feature.
 * @param description: A brief description of the feature.
 *
 * @example
 * ```ignis
 * #[Feature("MyFeature", "This is a feature that does something.")]
 * export function myFunction(): void {
 * }
 * ```
 */
export meta Feature(name: string, description: string);

/**
 * Marks a declaration as deprecated, providing the version in which it was deprecated and an optional description.
 *
 * @param version: The version in which the feature was deprecated.
 * @param description: A brief explanation of the deprecation.
 *
 * @example
 * ```ignis
 * #[Deprecated("1.0.0", "This function is deprecated.")]
 * export function myFunction(): void {
 * }
 * ```
 */
export meta Deprecated(version: string, description: string);

/**
 * Specifies that a declaration or code block is specific to a certain platform.
 *
 * @param platform: The platform for which the code is intended (e.g., "linux", "windows").
 * @param description: A brief description of the platform-specific code.
 *
 * @example
 *
 * ```ignis
 * #[PlatformSpecific("linux", "This code is specific to Linux.")]
 * export function myFunction(): void {
 * }
 */
export meta PlatformSpecific(platform: string, description: string);

/**
 * Marks a declaration as experimental, indicating it is subject to change and should be used with caution.
 *
 * @param version: The version in which the experimental feature was introduced.
 * @param description: A brief explanation of the experimental feature.
 *
 * @example
 *
 * ```ignis
 * #[Experimental("1.0.0", "This function is experimental.")]
 * export function myFunction(): void {
 * }
 */
export meta Experimental(version: string, description: string);

/**
 * Marks code as internal, indicating it is not intended for public use. It can only be used at the directory level
 * and it will not be possible to export at module level.
 *
 * @param description: A brief explanation of why the code is internal.
 *
 * @example
 * ```ignis
 * #[Internal("This code is internal.")]
 * export function myFunction(): void {
 * }
 */
export meta Internal(description: string);

/**
 * Marks a declaration as global, making it accessible throughout the entire program.
 *
 * @param description: A brief description of the global context.
 *
 * @example
 * ```ignis
 * #[Global("This code is global.")]
 * export function myFunction(): void {
 * }
 * ```
 */
export meta Global(description: string);

/**
 * Disables linting for the marked code, allowing it to bypass lint checks. Only for warnings and hint lints, not for errors.
 *
 * @example
 * ```ignis
 * #[DisableLint]
 * export function myFunction(): void {
 * }
 *```
 */
export meta DisableLint;

/**
 * Enables linting for the marked code, enforcing lint checks. Only for warnings and hint lints, not for errors.
 *
 * @example
 * ```ignis
 * #[EnableLint]
 * export function myFunction(): void {
 * }
 * ```
 */
export meta EnableLint;

/**
 * Marks a function as the main entry point of the program.
 */
export meta MainFunction;

/**
 * Marks a function as a copy function.
 */
export meta Copy;

/**
 * Marks a function as a clone function.
 */
export meta Clone;
